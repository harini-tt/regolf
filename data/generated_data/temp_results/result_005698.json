{
  "expr": "([^.()]+)(?:\\(([^.()]+)\\))?(?:\\.(gt|ge|lt|le|eq|bt|in|ct|no)(.*))?",
  "yes": [
    "s_dsd.no342",
    "variable.gt123",
    "name(eqJohn)",
    "function(inList).le100",
    "value(bt50,100)",
    "x(ctValue)",
    "y.noValue",
    "z.gt10",
    "abc.eqXYZ",
    "param(inParams)",
    "field.le50",
    "data.ge30",
    "measure(abc).lt20",
    "status.gt",
    "item.bt(1,2)",
    "keyValue.ge(5)",
    "response.no(200)",
    "check.eq()",
    "attr.in()",
    "test.ct()",
    "value.no",
    "field.no()",
    "string.bt()",
    "abc.in()",
    "xyz.gt",
    "key.no123",
    "data.le",
    "measure.ge",
    "name.lt",
    "param.no",
    "value.eq",
    "test.gt()",
    "item.le",
    "check.ct",
    "field.in",
    "number.ge()",
    "object.lt",
    "property.no",
    "element.eq",
    "response.bt()",
    "method.in()",
    "value.ct",
    "factor.gt()",
    "item.le(20)",
    "variable.no",
    "signal.eq",
    "option.ge123",
    "code.in()"
  ],
  "no": [
    "",
    "nooperator.",
    "only.text",
    "missingoperator()",
    "parenthesis.notclosed(",
    ".leadingdot",
    "trailingdot.",
    "double..dots",
    "invalid()chars",
    "operatorwithoutname.gt",
    "eqwithoutvalue.eq()",
    "operator.withoutfield()",
    "periodinside().eq",
    "nested(parenthesis).eq",
    "dot.afterparenthesis()",
    "emptyfield.eq",
    "value.withoutoperator",
    "(justparenthesis)",
    ".onlyoperator",
    "multiple..dots.eq",
    "unclosed.parenthesis(",
    "(unopened.parenthesis",
    "operatorinmiddle.eq123",
    "dotafter(eq)",
    "dotbefore.ge()",
    "gt.withoutfield",
    "empty()operator",
    "field.with.multiple.dots",
    ".leadingcharinvalid",
    "empty()string",
    "dot.afteroperator.eq",
    "field.with.dot.",
    "just.operator",
    ".leading.and.trailing.",
    "dot.inwrong.place()",
    "field..double",
    "unmatched(eq)parenthesis",
    "just.number.123",
    "unsupported.operator.xy",
    "field.with(dot)inside",
    "missing.operator",
    "only.leading.dot.",
    "field.without.operator",
    "dot.after(eq).before",
    "field.two..dots",
    "unsupported(eq)chars",
    "invalid).chars",
    "no.operator.eq",
    "field.with..dots"
  ]
}