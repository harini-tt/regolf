{
  "expr": "(?:((\\babstract\\b\\s)?)(T\\s|\\w+<?\\w+<?\\w+>?>?\\s)(\\w+<T>|[a-zA-Z0-9]+)(\\(.*\\))(\\s=>\\s\\w+)?)",
  "yes": [
    "public void Something();",
    "public List<int> SomethingElse();",
    "private List<string> SomethingElseElse(One one);",
    "private IEnumerable<List<string> Crazy(One one, Two two);",
    "private IEnumerable<List<string> Crazy(One one, Two two) => AndSoOn;",
    "public abstract void Run();",
    "public T Get<T>(params object[] args)",
    "private void rfrmBusyScreen_Load(object sender, EventArgs e)",
    "public void Generate24HourSchedule(List<ScheduledEntry> scheduled)",
    "public MyClass<T> Create<T>()",
    "protected virtual void Initialize()",
    "protected List<Dictionary<TKey, TValue>> CreateDictionary<TKey, TValue>()",
    "internal abstract Task ExecuteAsync(CancellationToken cancellationToken)",
    "public static IEnumerable<T> GetAll<T>()",
    "private Func<int, int> CreateMultiplier(int factor)",
    "protected async Task LoadDataAsync()",
    "public void Execute<T>(Action<T> action)",
    "protected void SetData<T>(IEnumerable<T> data)",
    "public string Format<T>(T item)",
    "private bool TryParse<T>(string input, out T result)",
    "public abstract IEnumerable<IResult> GetResults()",
    "private static bool ValidateInput<TInput>(TInput input)",
    "public static TOutput Transform<TInput, TOutput>(TInput input)",
    "internal void Cleanup<T>()",
    "public T Convert<T>(object value)",
    "private static void Log<T>(T message)",
    "protected List<T> Filter<T>(Func<T, bool> predicate)",
    "public TOutput Process<TInput, TOutput>(TInput input)",
    "protected T GetValue<T>(string key)",
    "public Task<T> FetchDataAsync<T>()",
    "private static string Serialize<T>(T obj)",
    "public abstract class BaseClass<T>",
    "public delegate TResult Func<TSource, TResult>(TSource arg)",
    "internal void Configure<T>(Action<T> configuration)",
    "public void Register<T>(T instance)",
    "protected T CreateInstance<T>()",
    "public bool Equals<T>(T other)",
    "protected void InitializeComponent()",
    "public void Dispose<T>()",
    "private static Lazy<T> CreateLazy<T>()",
    "internal Task<T> GetTask<T>()",
    "protected abstract void ProcessData<T>()",
    "public List<T> GetList<T>()",
    "private Dictionary<TKey, TValue> CreateMap<TKey, TValue>()",
    "internal static bool IsValid<T>(T item)",
    "public abstract void ExecuteCommand()",
    "protected async Task LoadAsync<T>()",
    "private T GetItem<T>(int index)"
  ],
  "no": [
    "voidSomething()",
    "public void Something",
    "private int number",
    "public List<> CreateList()",
    "abstract void",
    "int x = 0;",
    "public void Run",
    "private var items = new List<int>()",
    "function doSomething()",
    "public void (param1, param2)",
    "public abstract",
    "List<int> list = new List<int>()",
    "public static void",
    "private class MyClass",
    "var result = function()",
    "protected void Initialize",
    "public void Execute",
    "Task<int> task = null;",
    "string str = \"hello\";",
    "public void (params object[] args)",
    "int Add(int a, int b)",
    "var data = GetData()",
    "public void",
    "void ExecuteTask()",
    "protected async Task",
    "List<T>",
    "public void Generate24HourSchedule",
    "var x = 5;",
    "private static void",
    "internal abstract",
    "public abstract void();",
    "private void rfrmBusyScreen_Load",
    "var dict = new Dictionary<int, string>()",
    "public void<T>()",
    "abstract void Run",
    "public void Generate<>()",
    "<T> Create<T>()",
    "void Run<T>",
    "public void Execute<T>",
    "protected Task LoadDataAsync",
    "var item = GetItem<T>()",
    "public T Get<T>",
    "void Process<T>()",
    "public void ()",
    "Task FetchDataAsync<T>()",
    "abstract GetResults()",
    "public static class Utilities",
    "var items = new List<string>()",
    "int Parse(string input)"
  ]
}