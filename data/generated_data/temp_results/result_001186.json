{
  "expr": "^(?=.*[a-zA-Z])(?=.*\\d)[a-zA-Z0-9~!@#$%^&*()_+}{\\][\";:;'?/>;.<;,]{8,64}$",
  "yes": [
    "F7!@#$%^&*()",
    "a1b2C3d4",
    "Password123!",
    "secure$001",
    "aB1!aB1!",
    "LongPassword123!WithSymbols",
    "SecureKey2023!",
    "Alpha123!",
    "Beta!456",
    "Gamma789~",
    "Delta+0",
    "Epsilon_1!",
    "Zeta-9?",
    "Eta&2",
    "Theta#3",
    "Iota%4",
    "Kappa*5",
    "Lambda_6",
    "Mu(7)",
    "Nu)8",
    "Xi9!",
    "Omicron0@",
    "Pi!1",
    "Rho@2",
    "Sigma#3",
    "Tau$4",
    "Upsilon%5",
    "Phi^6",
    "Chi&7",
    "Psi*8",
    "Omega(9)",
    "Z9^&*()_+",
    "ValidPass99#",
    "Strong&123",
    "Key_2023!",
    "MySecurePwd9$",
    "Admin#1000",
    "User_1Secure",
    "TestPassword123!",
    "MockData123!",
    "Example999?",
    "PatternMatch1!",
    "RegexGolf123$",
    "Challenge!2023",
    "FinalTest123#",
    "ComplexPwd2023!",
    "SafeKey2023~",
    "Secure!1234567890",
    "Complex#Password2023",
    "LongValidStringWith123",
    "EndToEnd123!Test"
  ],
  "no": [
    "",
    "1234567",
    "abcdefg",
    "!@#$%^&",
    "abcdefgh",
    "ABCDEFGH",
    "12345678",
    "password",
    "PASSWORD",
    "1234abcd",
    "abcd1234",
    "a1!",
    "A1",
    "1A",
    "noDigitsHere!",
    "SymbolsNoLetters123",
    "Short1!",
    "OnlyLettersAndDigits1234567890",
    "tooshort1A",
    "waytoolongpassword12345678901234567890123456789012345678901234567890",
    "spaces not allowed 123A",
    "tabs\tare\tno\t123A",
    "newline\nnot\nallowed1A",
    "slashes/are/not/allowed1A",
    "backslashes\\are\\not\\allowed1A",
    "quotes\"are\"not\"allowed1A",
    "single'quotes'not'allowed1A",
    "commas,are,not,allowed1A",
    "periods.are.not.allowed1A",
    "colons:are:not:allowed1A",
    "semicolons;are;not;allowed1A",
    "less<than>greater>than1A",
    "pipes|are|not|allowed1A",
    "equals=are=not=allowed1A",
    "plus+is+not+allowed1A",
    "minus-is-not-allowed1A",
    "underscore_is_not_allowed1A",
    "tilde~is~not~allowed1A",
    "caret^is^not^allowed1A",
    "backtick`is`not`allowed1A",
    "parentheses(are)not(allowed1A",
    "brackets[are]not[allowed1A",
    "braces{are}not{allowed1A",
    "asterisk*not*allowed1A",
    "ampersand&not&allowed1A",
    "percent%not%allowed1A",
    "at@not@allowed1A"
  ]
}