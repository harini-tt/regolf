{
  "expr": "(\\s+)((?<=\\s)[a-z]|^[a-z]).*?([A-Z]?(?<=[a-zA-Z0-9])[a-zA-Z0-9]+)",
  "yes": [
    " do we have a Hashtag",
    " example with aWord",
    " this is a Test",
    " hello World",
    " python is fun",
    " some random Words",
    " let's try a Challenge",
    " simple example Here",
    " another One",
    " check out this Example",
    " regex Golf is interesting",
    " please match this String",
    " find the Pattern",
    " the quick brown fox",
    " lazy Dog",
    " jump over the Moon",
    " yet another Test",
    " challenge Accepted",
    " hello there General",
    " Kenobi",
    " testing with a Phrase",
    " a simple Example",
    " strings can be Tricky",
    " look at this Test",
    " make sure it Matches",
    " regex is Powerful",
    " the Answer is 42",
    " understanding Regex",
    " validate with Examples",
    " this should Work",
    " edge Cases matter",
    " find the Solution",
    " try another Example",
    " inspect this Line",
    " it matches the Pattern",
    " boundaries must be Respected",
    " test this Input",
    " capture the Group",
    " verify the Match",
    " understanding the Context",
    " do you see the Match",
    " this is a Testcase",
    " regex is Cool",
    " match the Expression",
    " important to Capture",
    " learning with Examples",
    " this is a Sequence",
    " let's see the Result",
    " this is a Word"
  ],
  "no": [
    "noSpacesAtStart",
    " thisDoesn'tEndProperly ",
    "Another case",
    "123startWithNumbers",
    "ends with space ",
    "alllowercase",
    " ALLUPPERCASE",
    "MiXeDCasE",
    " mixOf123And456",
    " leadingSpaceFollowedByNumber 3",
    "123456",
    "",
    " ",
    " spaces only ",
    " aBcD",
    "123abc",
    " special$characters",
    "\tTabStart",
    "\nNewLineStart",
    "separators-like-hyphens",
    " punctuations,are,tricky",
    " mix of, punctuation!",
    " leading spaces  and trailing",
    " trailing spaces ",
    " tab\tcharacter",
    " whitespace\tinbetween",
    " mix of\twhitespace",
    " multiple   spaces in between",
    " special@char",
    " mix@of#special$chars",
    " random123456",
    " numbers1234",
    "1234numbers",
    " 1234 leading numbers",
    " noUpperCase",
    "123456noUpperCase",
    " justNumbers1234",
    "1234",
    " no-trailing-space",
    " leading space 123",
    " trailing 123 ",
    " 123 with trailing",
    "123with no leading",
    "123and456",
    "123mixed456",
    " numbers-in-middle123",
    "123 numbers-at-end",
    " no patterns here"
  ]
}